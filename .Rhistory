tropical = c('darkorange', 'dodgerblue', hotpink', 'limegreen', 'yellow'')
tropical = c('darkorange', 'dodgerblue', 'hotpink', 'limegreen', 'yellow'')
;
qojf
tropical = c('darkorange', 'dodgerblue', 'hotpink', 'limegreen', 'yellow')
palette(tropical)
par(pch=19)
library(devtools)
library(Biobase)
library(limma)
library(edge)
library(genefilter)
library(qvalue)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bottomly_eset.RData")
load(file=con)
close(con)
bot = bottomly.eset
pdata=pData(bot)
edata=as.matrix(exprs(bot))
fdata = fData(bot)
ls()
edata = log2(as.matrix(edata) + 1)
edata = edata[rowMeans(edata) > 10, ]
fstats_obj = rowFtests(edata,as.factor(pdata$strain))
hist(fstats_obj$p.value,col=2)
edge_study = build_study(edata, grp = pdata$strain,
adj.var = as.factor(pdata$lane.number))
de_obj = lrt(edge_study)
qval = qvalueObj(de_obj)
hist(qval$pvalues,col=3)
mod = model.matrix(~ pdata$strain + pdata$lane.number)
fit_limma = lmFit(edata,mod)
ebayes_limma = eBayes(fit_limma)
limma_pvals = topTable(ebayes_limma,number=dim(edata)[1])$P.Value
hist(limma_pvals,col=4)
set.seed(3333)
B = 1000
tstats_obj = rowttests(edata,pdata$strain)
tstat0 = matrix(NA,nrow=dim(edata)[1],ncol=B)
tstat = tstats_obj$statistic
strain = pdata$strain
for(i in 1:B){
strain0 = sample(strain)
tstat0[,i] = rowttests(edata,strain0)$statistic
}
emp_pvals = empPvals(tstat,tstat0)
hist(emp_pvals,col=2)
fp_bonf = p.adjust(fstats_obj$p.value,method="bonferroni")
hist(fp_bonf,col=3)
quantile(fp_bonf)
fp_bh = p.adjust(fstats_obj$p.value,method="BH")
hist(fp_bh,col=3)
quantile(fp_bh)
sum(fp_bh < 0.05)
limma_pvals_adj = topTable(ebayes_limma,number=dim(edata)[1])$adj.P.Val
hist(limma_pvals_adj,col=2)
quantile(limma_pvals_adj)
qval_limma = qvalue(limma_pvals)
summary(qval_limma)
qval$pi0
qval = qvalueObj(de_obj)
summary(qval)
require(rgl)
demo(rgl)
library(devtools)
library(Biobase)
library(goseq)
library(DESeq2)
head(supportedGenomes())
head(supportedGenomes())
library(devtools)
library(devtools)
library(Biobase)
library(goseq)
biocLite(c("Biobase","goseq","DESeq2"))
source("http://www.bioconductor.org/biocLite.R")
biocLite(c("Biobase","goseq","DESeq2"))
head(supportedGenomes())
library(devtools)
library(Biobase)
library(goseq)
library(DESeq2)
head(supportedGenomes())
head(supportedGenomes())
head(supportedGeneIDs())
temp_data =read.table(system.file("extdata","Li_sum.txt",
package="goseq"),sep="\t",
header=TRUE,
stringsAsFactors=FALSE)
temp_data[1,]
temp_data[,-1]
rownames(expr) = temp_data[,1]
temp_data =read.table(system.file("extdata","Li_sum.txt",
package="goseq"),sep="\t",
header=TRUE,
stringsAsFactors=FALSE);
temp_data[1,]
expr= temp_data[,-1]
expr[1,]
rownames(expr) = temp_data[,1]
expr[1,]
expr = expr[rowMeans(expr) > 5,]
rep("Control","Treated"),times=c(4,3))
rep(c("Control","Treated"),times=c(4,3))
View(expr)
View(expr)
grp=factor(rep(c("Control","Treated"),times=c(4,3)))
grp
pdata  = data.frame(grp)
View(pdata)
View(pdata)
de = DESeqDataSetFromMatrix(expr, pdata, ~grp)
de_fit = DESeq(de)
de_results = results(de_fit)
head(de_results)
genes = as.integer(de_results$padj < 0.05)
not_na = !is.na(genes)
names(genes) = rownames(expr)
genes = genes[not_na]
pwf=nullp(genes,"hg19","ensGene")
head(pwf)
GO.wall=goseq(pwf,"hg19","ensGene")
GO.wall=goseq(pwf,"hg19","ensGene")
install.packages(org.Hs.eg.db)
install.packages("org.Hs.eg.db")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("org.Hs.eg.db")
GO.wall=goseq(pwf,"hg19","ensGene")
head(GO.wall)
GO.MF=goseq(pwf,"hg19","ensGene",test.cats=c("GO:MF"))
head(GO.MF)
library(devtools)
library(Biobase)
library(MatrixEQTL)
install.packages("MatrixEQTL")
biocLite(c("Biobase"))
source("http://www.bioconductor.org/biocLite.R")
biocLite(c("Biobase"))
base.dir = find.package("MatrixEQTL")
base.dir
SNP_file_name = paste(base.dir, "/data/SNP.txt", sep="");
SNP_file_name
xpression_file_name = paste(base.dir, "/data/GE.txt", sep="")
expression_file_name = paste(base.dir, "/data/GE.txt", sep="")
clear(xpression_file_name)
covariates_file_name = paste(base.dir, "/data/Covariates.txt", sep="")
output_file_name = tempfile()
expr = read.table(expression_file_name,sep="\t",header=T,row.names=1)
expr[1,]
snps = read.table(SNP_file_name,sep="\t",header=T,row.names=1)
snps[1,]
cvrt = read.table(covariates_file_name,sep="\t",header=T,row.names=1)
dim(crvt)
dim(cvrt)
crvt
cvrt
e1 = as.numeric(expr[1,])
e1
s1 = as.numeric(snps[1,])
s1
lm1 = lm(e1 ~ s1)
tidy(lm1)
tidy(lm1)
install.packages("tidyr")
tidy(lm1)
library(tidyr)
tidy(lm1)
library(tidyr)
tidy(lm1)
library(broom)
tidy(lm1)
plot(e1 ~ jitter(s1),col=(s1+1),xaxt="n",xlab="Genotype",ylab="Expression")
axis(1,at=c(0:2),labels=c("AA","Aa","aa"))
lines(lm1$fitted ~ s1,type="b",pch=15,col="darkgrey")
plot(e1 ~ s1,col=(s1+1),xaxt="n",xlab="Genotype",ylab="Expression")
pvOutputThreshold = 1e-2
errorCovariance = numeric()
useModel = modelLINEAR
pvOutputThreshold = 1e-2
pvOutputThreshold = 1e-2
errorCovariance = numeric()
useModel = modelLINEAR
library('MatrixEQTL')
useModel = modelLINEAR
nps = SlicedData$new()
snps$fileDelimiter = "\t"     # the TAB character
snps$fileOmitCharacters = "NA" # denote missing values;
snps$fileSkipRows = 1          # one row of column labels
snps$fileSkipColumns = 1       # one column of row labels
snps$fileSliceSize = 2000     # read file in pieces of 2,000 rows
snps$LoadFile( SNP_file_name )
snps = SlicedData$new()
snps$fileDelimiter = "\t"     # the TAB character
snps$fileOmitCharacters = "NA" # denote missing values;
snps$fileSkipRows = 1          # one row of column labels
snps$fileSkipColumns = 1       # one column of row labels
snps$fileSliceSize = 2000     # read file in pieces of 2,000 rows
snps$LoadFile( SNP_file_name )
gene = SlicedData$new()
gene$fileDelimiter = "\t"      # the TAB character
gene$fileOmitCharacters = "NA" # denote missing values;
gene$fileSkipRows = 1          # one row of column labels
gene$fileSkipColumns = 1      # one column of row labels
gene$fileSliceSize = 2000      # read file in pieces of 2,000 rows
gene$LoadFile(expression_file_name)
cvrt = SlicedData$new()
me = Matrix_eQTL_engine(
snps = snps,
gene = gene,
cvrt = cvrt,
output_file_name = NULL,
pvOutputThreshold = pvOutputThreshold,
useModel = useModel,
errorCovariance = errorCovariance,
verbose = TRUE,
pvalue.hist = TRUE,
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE);
plot(me)
me$all$neqtls
me$all$eqtls
setwd("~/GitHub/Reproductible Research/RepData_PeerAssessment1")
hist(aggregate(nona_activity$steps, list(nona_activity$date), sum)$x)
activity <- read.csv("activity.csv")
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
View(activity)
View(activity)
max(activity$steps)
max(nona_activity$steps)
aggregate(nona_activity$steps, list(nona_activity$date), sum)
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
activity$day_interval <- activity$interval %% 100
View(activity)
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
aggregated_data <- aggregate(nona_activity$steps, list(nona_activity$day_interval), mean)
activity$day_interval <- activity$interval %% 100
aggregated_data <- aggregate(nona_activity$steps, list(nona_activity$day_interval), mean)
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
aggregate(nona_activity$steps, list(nona_activity$day_interval), mean)
aggregate(nona_activity$steps, list(nona_activity$day_interval), mean)
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
print(mean(aggregate(activity$steps, list(activity$date), sum)$x))
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
interval_means$x
max(interval_means$x
)
interval_means[interval_means$x == max(interval_means$x)]
interval_means[interval_means$x == max(interval_means$x),]
interval_means[interval_means$x == max(interval_means$x)$Group.1,]
print(interval_means[interval_means$x == max(interval_means$x)$Group.1,])
print(interval_means[interval_means$x == max(interval_means$x),])
interval_means[interval_means$x == max(interval_means$x),]
interval_means[interval_means$x == max(interval_means$x),]$x
interval_means[interval_means$x == max(interval_means$x),]$Group.1
print(interval_means[interval_means$x == max(interval_means$x),]$Group.1)
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
print("Total number of rows with NAs:")
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
ctivity$day_interval[n]
View(activity)
head(activity)
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
print(head(activity))
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
print(head(activity))
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
View(noNA_activity)
View(noNA_activity)
View(activity)
View(activity)
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
comp <- c(aggregate(activity$steps, list(noNA_activity$date), sum)$x,
aggregate(activity$steps, list(activity$date), sum)$x,)
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
View(interval_means)
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
View(new_interval_means)
View(interval_means)
View(new_interval_means)
View(interval_means)
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
View(interval_means)
View(interval_means)
View(weekday_activity)
View(weekend_activity)
View(activity)
hist(aggregate(activity$steps, list(activity$date), sum)$x,
breaks = 10, main = "Hist of the new total number of steps taken each day",
xlab = "New total number of steps taken each day")
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
View(weekday_activity)
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
par(mfrow=c(2,1), xlab = "Interval", ylab = "Average number of steps taken" )
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
plot(
aggregate(weekday_activity$steps, list(weekday_activity$interval), mean)$Group.1,
aggregate(weekday_activity$steps, list(weekday_activity$interval), mean)$x,
type = "l", main =  "Weekday", xlab = "Interval", ylab = "Average number of steps taken", ylim=c(0, 200))
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
View(activity)
activity <- read.csv("activity.csv")
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
asis_mdian
asis_median
new_median
int(new_median)
round(new_median)
source('~/GitHub/Reproductible Research/RepData_PeerAssessment1/PA1_template.R')
